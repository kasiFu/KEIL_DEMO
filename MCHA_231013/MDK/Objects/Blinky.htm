<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\Blinky.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\Blinky.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060960: Last Updated: Fri Mar 08 09:36:26 2024
<BR><P>
<H3>Maximum Stack Usage =        616 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
Rte_1ms_Task &rArr; UDS_MainFun &rArr; SetNegativeErroCode &rArr; LINTP_TxMsg
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[14]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[14]">NMI_Handler</a><BR>
 <LI><a href="#[16]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[16]">SVC_Handler</a><BR>
 <LI><a href="#[17]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[17]">PendSV_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[49]">CommunicationControl</a> from uds_app.o(i.CommunicationControl) referenced from uds_app.o(.constdata)
 <LI><a href="#[4a]">ControlDTCSetting</a> from uds_app.o(i.ControlDTCSetting) referenced from uds_app.o(.constdata)
 <LI><a href="#[48]">DigSession</a> from uds_app.o(i.DigSession) referenced from uds_app.o(.constdata)
 <LI><a href="#[15]">HardFault_Handler</a> from debug.o(i.HardFault_Handler) referenced from startup_bat32a237.o(RESET)
 <LI><a href="#[19]">IRQ00_Handler</a> from isr.o(i.IRQ00_Handler) referenced from startup_bat32a237.o(RESET)
 <LI><a href="#[1a]">IRQ01_Handler</a> from isr.o(i.IRQ01_Handler) referenced from startup_bat32a237.o(RESET)
 <LI><a href="#[1b]">IRQ02_Handler</a> from isr.o(i.IRQ02_Handler) referenced from startup_bat32a237.o(RESET)
 <LI><a href="#[1c]">IRQ03_Handler</a> from isr.o(i.IRQ03_Handler) referenced from startup_bat32a237.o(RESET)
 <LI><a href="#[1d]">IRQ04_Handler</a> from isr.o(i.IRQ04_Handler) referenced from startup_bat32a237.o(RESET)
 <LI><a href="#[1e]">IRQ05_Handler</a> from isr.o(i.IRQ05_Handler) referenced from startup_bat32a237.o(RESET)
 <LI><a href="#[1f]">IRQ06_Handler</a> from isr.o(i.IRQ06_Handler) referenced from startup_bat32a237.o(RESET)
 <LI><a href="#[20]">IRQ07_Handler</a> from isr.o(i.IRQ07_Handler) referenced from startup_bat32a237.o(RESET)
 <LI><a href="#[21]">IRQ08_Handler</a> from isr.o(i.IRQ08_Handler) referenced from startup_bat32a237.o(RESET)
 <LI><a href="#[22]">IRQ09_Handler</a> from isr.o(i.IRQ09_Handler) referenced from startup_bat32a237.o(RESET)
 <LI><a href="#[23]">IRQ10_Handler</a> from isr.o(i.IRQ10_Handler) referenced from startup_bat32a237.o(RESET)
 <LI><a href="#[24]">IRQ11_Handler</a> from isr.o(i.IRQ11_Handler) referenced from startup_bat32a237.o(RESET)
 <LI><a href="#[25]">IRQ12_Handler</a> from isr.o(i.IRQ12_Handler) referenced from startup_bat32a237.o(RESET)
 <LI><a href="#[26]">IRQ13_Handler</a> from isr.o(i.IRQ13_Handler) referenced from startup_bat32a237.o(RESET)
 <LI><a href="#[27]">IRQ14_Handler</a> from isr.o(i.IRQ14_Handler) referenced from startup_bat32a237.o(RESET)
 <LI><a href="#[28]">IRQ15_Handler</a> from isr.o(i.IRQ15_Handler) referenced from startup_bat32a237.o(RESET)
 <LI><a href="#[29]">IRQ16_Handler</a> from isr.o(i.IRQ16_Handler) referenced from startup_bat32a237.o(RESET)
 <LI><a href="#[2a]">IRQ17_Handler</a> from isr.o(i.IRQ17_Handler) referenced from startup_bat32a237.o(RESET)
 <LI><a href="#[2b]">IRQ18_Handler</a> from isr.o(i.IRQ18_Handler) referenced from startup_bat32a237.o(RESET)
 <LI><a href="#[2c]">IRQ19_Handler</a> from isr.o(i.IRQ19_Handler) referenced from startup_bat32a237.o(RESET)
 <LI><a href="#[2d]">IRQ20_Handler</a> from isr.o(i.IRQ20_Handler) referenced from startup_bat32a237.o(RESET)
 <LI><a href="#[2e]">IRQ21_Handler</a> from isr.o(i.IRQ21_Handler) referenced from startup_bat32a237.o(RESET)
 <LI><a href="#[2f]">IRQ22_Handler</a> from isr.o(i.IRQ22_Handler) referenced from startup_bat32a237.o(RESET)
 <LI><a href="#[30]">IRQ23_Handler</a> from isr.o(i.IRQ23_Handler) referenced from startup_bat32a237.o(RESET)
 <LI><a href="#[31]">IRQ24_Handler</a> from isr.o(i.IRQ24_Handler) referenced from startup_bat32a237.o(RESET)
 <LI><a href="#[32]">IRQ25_Handler</a> from isr.o(i.IRQ25_Handler) referenced from startup_bat32a237.o(RESET)
 <LI><a href="#[33]">IRQ26_Handler</a> from isr.o(i.IRQ26_Handler) referenced from startup_bat32a237.o(RESET)
 <LI><a href="#[34]">IRQ27_Handler</a> from isr.o(i.IRQ27_Handler) referenced from startup_bat32a237.o(RESET)
 <LI><a href="#[35]">IRQ28_Handler</a> from isr.o(i.IRQ28_Handler) referenced from startup_bat32a237.o(RESET)
 <LI><a href="#[36]">IRQ29_Handler</a> from isr.o(i.IRQ29_Handler) referenced from startup_bat32a237.o(RESET)
 <LI><a href="#[37]">IRQ30_Handler</a> from isr.o(i.IRQ30_Handler) referenced from startup_bat32a237.o(RESET)
 <LI><a href="#[38]">IRQ31_Handler</a> from isr.o(i.IRQ31_Handler) referenced from startup_bat32a237.o(RESET)
 <LI><a href="#[5]">IntDefaultHandler</a> from isr.o(i.IntDefaultHandler) referenced 92 times from isr.o(.data)
 <LI><a href="#[55]">LINTP_RxMsg</a> from uds_lin_tp.o(i.LINTP_RxMsg) referenced from uds_lin_tp.o(.constdata)
 <LI><a href="#[54]">LINTP_TxMsg</a> from uds_lin_tp.o(i.LINTP_TxMsg) referenced from uds_lin_tp.o(.constdata)
 <LI><a href="#[3f]">LinMainFun</a> from lin_protocol.o(i.LinMainFun) referenced from lin_protocol.o(i.LIN_SetConfig)
 <LI><a href="#[12]">Massage_ModeX</a> from massage.o(i.Massage_ModeX) referenced 2 times from massage.o(.data)
 <LI><a href="#[11]">Massage_pulse</a> from massage.o(i.Massage_pulse) referenced 2 times from massage.o(.data)
 <LI><a href="#[10]">Massage_wave</a> from massage.o(i.Massage_wave) referenced 2 times from massage.o(.data)
 <LI><a href="#[14]">NMI_Handler</a> from startup_bat32a237.o(.text) referenced from startup_bat32a237.o(RESET)
 <LI><a href="#[17]">PendSV_Handler</a> from startup_bat32a237.o(.text) referenced from startup_bat32a237.o(RESET)
 <LI><a href="#[4c]">ReadDataByIdentifier</a> from uds_app.o(i.ReadDataByIdentifier) referenced from uds_app.o(.constdata)
 <LI><a href="#[4e]">RequestDownload</a> from uds_app.o(i.RequestDownload) referenced from uds_app.o(.constdata)
 <LI><a href="#[50]">RequestTransferExit</a> from uds_app.o(i.RequestTransferExit) referenced from uds_app.o(.constdata)
 <LI><a href="#[52]">ResetECU</a> from uds_app.o(i.ResetECU) referenced from uds_app.o(.constdata)
 <LI><a href="#[13]">Reset_Handler</a> from startup_bat32a237.o(.text) referenced from startup_bat32a237.o(RESET)
 <LI><a href="#[51]">RoutineControl</a> from uds_app.o(i.RoutineControl) referenced from uds_app.o(.constdata)
 <LI><a href="#[42]">Rte_10ms_Task_A</a> from rte.o(i.Rte_10ms_Task_A) referenced from rte_cfg.o(.constdata)
 <LI><a href="#[44]">Rte_10ms_Task_B</a> from rte.o(i.Rte_10ms_Task_B) referenced from rte_cfg.o(.constdata)
 <LI><a href="#[45]">Rte_10ms_Task_C</a> from rte.o(i.Rte_10ms_Task_C) referenced from rte_cfg.o(.constdata)
 <LI><a href="#[46]">Rte_10ms_Task_D</a> from rte.o(i.Rte_10ms_Task_D) referenced from rte_cfg.o(.constdata)
 <LI><a href="#[47]">Rte_10ms_Task_E</a> from rte.o(i.Rte_10ms_Task_E) referenced from rte_cfg.o(.constdata)
 <LI><a href="#[41]">Rte_1ms_Task</a> from rte.o(i.Rte_1ms_Task) referenced 10 times from rte_cfg.o(.constdata)
 <LI><a href="#[43]">Rte_2ms_Task</a> from rte.o(i.Rte_2ms_Task) referenced 5 times from rte_cfg.o(.constdata)
 <LI><a href="#[16]">SVC_Handler</a> from startup_bat32a237.o(.text) referenced from startup_bat32a237.o(RESET)
 <LI><a href="#[4b]">SecurityAccess</a> from uds_app.o(i.SecurityAccess) referenced from uds_app.o(.constdata)
 <LI><a href="#[18]">SysTick_Handler</a> from isr.o(i.SysTick_Handler) referenced from startup_bat32a237.o(RESET)
 <LI><a href="#[39]">SystemInit</a> from system_bat32a237.o(i.SystemInit) referenced from startup_bat32a237.o(.text)
 <LI><a href="#[40]">TIMER_HAL_1msPeriod</a> from timer_hal.o(i.TIMER_HAL_1msPeriod) referenced from timer_hal.o(i.TIMER_HAL_Init)
 <LI><a href="#[53]">TesterPresent</a> from uds_app.o(i.TesterPresent) referenced from uds_app.o(.constdata)
 <LI><a href="#[4f]">TransferData</a> from uds_app.o(i.TransferData) referenced from uds_app.o(.constdata)
 <LI><a href="#[4d]">WriteDataByIdentifier</a> from uds_app.o(i.WriteDataByIdentifier) referenced from uds_app.o(.constdata)
 <LI><a href="#[56]">__main</a> from __main.o(!!!main) referenced from startup_bat32a237.o(.text)
 <LI><a href="#[f]">bag10out</a> from massage.o(i.bag10out) referenced 2 times from massage.o(.data)
 <LI><a href="#[6]">bag1out</a> from massage.o(i.bag1out) referenced 2 times from massage.o(.data)
 <LI><a href="#[7]">bag2out</a> from massage.o(i.bag2out) referenced 2 times from massage.o(.data)
 <LI><a href="#[8]">bag3out</a> from massage.o(i.bag3out) referenced 2 times from massage.o(.data)
 <LI><a href="#[9]">bag4out</a> from massage.o(i.bag4out) referenced 2 times from massage.o(.data)
 <LI><a href="#[a]">bag5out</a> from massage.o(i.bag5out) referenced 2 times from massage.o(.data)
 <LI><a href="#[b]">bag6out</a> from massage.o(i.bag6out) referenced 2 times from massage.o(.data)
 <LI><a href="#[c]">bag7out</a> from massage.o(i.bag7out) referenced 2 times from massage.o(.data)
 <LI><a href="#[d]">bag8out</a> from massage.o(i.bag8out) referenced 2 times from massage.o(.data)
 <LI><a href="#[e]">bag9out</a> from massage.o(i.bag9out) referenced 2 times from massage.o(.data)
 <LI><a href="#[3b]">intp0_interrupt</a> from intp_drv.o(i.intp0_interrupt) referenced from intp_drv.o(i.Intp_Init)
 <LI><a href="#[3e]">tim40_channel3_interrupt</a> from lin_protocol.o(i.tim40_channel3_interrupt) referenced from lin_protocol.o(i.LIN_SetConfig)
 <LI><a href="#[3d]">uart0_lin_receive</a> from lin_protocol.o(i.uart0_lin_receive) referenced from lin_protocol.o(i.LIN_SetConfig)
 <LI><a href="#[3c]">uart0_lin_send</a> from lin_protocol.o(i.uart0_lin_send) referenced from lin_protocol.o(i.LIN_SetConfig)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[56]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[57]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[59]"></a>__scatterload_rt2</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[112]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[113]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[114]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[5d]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[115]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[116]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[117]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[118]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[119]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[11a]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[11b]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[11c]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[11d]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[11e]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[11f]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[120]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[121]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[122]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[123]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[124]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[125]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[126]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[127]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[128]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[129]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[62]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[12a]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[12b]"></a>__rt_lib_shutdown_fini_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[12c]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[12d]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000011))

<P><STRONG><a name="[12e]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000012))

<P><STRONG><a name="[12f]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[130]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[131]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[58]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[132]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[5a]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[5c]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[133]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[5e]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 584 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; EcuM_Init &rArr; BootInit &rArr; LINTP_TxMsg
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[134]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[7e]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[61]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[135]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[63]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[6a]"></a>__aeabi_memcpy4</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, rt_memcpy.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[136]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy.o(.emb_text), UNUSED)

<P><STRONG><a name="[13]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_bat32a237.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32a237.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_bat32a237.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32a237.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_bat32a237.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>

<P><STRONG><a name="[66]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_bat32a237.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>

<P><STRONG><a name="[67]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_bat32a237.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>

<P><STRONG><a name="[16]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_bat32a237.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32a237.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_bat32a237.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>

<P><STRONG><a name="[17]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_bat32a237.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32a237.o(RESET)
</UL>
<P><STRONG><a name="[7c]"></a>__user_initial_stackheap</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, startup_bat32a237.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[69]"></a>__aeabi_memcpy</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, rt_memcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDataByIdentifier
</UL>

<P><STRONG><a name="[137]"></a>__rt_memcpy</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, rt_memcpy.o(.text), UNUSED)

<P><STRONG><a name="[6b]"></a>__aeabi_memset</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, aeabi_memset.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppMemset
</UL>

<P><STRONG><a name="[6d]"></a>_memset_w</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr_w
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>

<P><STRONG><a name="[6c]"></a>_memset</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[6e]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>

<P><STRONG><a name="[138]"></a>__rt_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[8a]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BootInit
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDS_MainFun
</UL>

<P><STRONG><a name="[139]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[6f]"></a>__rt_memclr_w</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[13a]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[80]"></a>__aeabi_uidivmod</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCIPeriphal_ClockUpdate
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LINTP_TxMsg
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Converse
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mcu_SystemClock_Init
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_init
</UL>

<P><STRONG><a name="[13b]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[da]"></a>__aeabi_idivmod</STRONG> (Thumb, 326 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RestartS3Server
</UL>

<P><STRONG><a name="[13c]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[13d]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[13e]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[e2]"></a>__aeabi_f2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCIPeriphal_ClockUpdate
</UL>

<P><STRONG><a name="[13f]"></a>_f2d</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, f2d.o(.text), UNUSED)

<P><STRONG><a name="[e1]"></a>__aeabi_fdiv</STRONG> (Thumb, 0 bytes, Stack size 20 bytes, fdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCIPeriphal_ClockUpdate
</UL>

<P><STRONG><a name="[71]"></a>_fdiv</STRONG> (Thumb, 334 bytes, Stack size 20 bytes, fdiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frdiv
</UL>

<P><STRONG><a name="[70]"></a>_frdiv</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fdiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
</UL>

<P><STRONG><a name="[73]"></a>__aeabi_i2f_normalise</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>

<P><STRONG><a name="[72]"></a>__aeabi_i2f</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fflti.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f_normalise
</UL>

<P><STRONG><a name="[140]"></a>_fflt</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflti.o(.text), UNUSED)

<P><STRONG><a name="[74]"></a>__aeabi_ui2f</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f_normalise
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCIPeriphal_ClockUpdate
</UL>

<P><STRONG><a name="[141]"></a>_ffltu</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflti.o(.text), UNUSED)

<P><STRONG><a name="[75]"></a>__fpl_dcmp_InfNaN</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, dcmpin.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN2
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drcmple
</UL>

<P><STRONG><a name="[78]"></a>__fpl_fcmp_InfNaN</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, fcmpin.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcheck_NaN2
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frcmple
</UL>

<P><STRONG><a name="[76]"></a>__fpl_cmpreturn</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, cmpret.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_InfNaN
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_InfNaN
</UL>

<P><STRONG><a name="[77]"></a>__fpl_dcheck_NaN2</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dnan2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_InfNaN
</UL>

<P><STRONG><a name="[79]"></a>__fpl_fcheck_NaN2</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, fnan2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_InfNaN
</UL>

<P><STRONG><a name="[5b]"></a>__user_setup_stackheap</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[60]"></a>exit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[7a]"></a>__fpl_return_NaN</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, retnan.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcheck_NaN2
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN2
</UL>

<P><STRONG><a name="[142]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[7b]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[143]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[64]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[144]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[145]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[146]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[147]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[148]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[7f]"></a>ADC_Converse</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, adc.o(i.ADC_Converse))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ADC_Converse
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Task1ms
</UL>

<P><STRONG><a name="[81]"></a>ADC_Init</STRONG> (Thumb, 236 bytes, Stack size 8 bytes, adc.o(i.ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ADC_Init &rArr; CGC_PER0PeriphClockCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CGC_PER0PeriphClockCmd
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_ClearPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_Config
</UL>

<P><STRONG><a name="[85]"></a>ADC_Stop</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, adc.o(i.ADC_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_ClearPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Task1ms
</UL>

<P><STRONG><a name="[87]"></a>Analog_Task1ms</STRONG> (Thumb, 298 bytes, Stack size 32 bytes, analog.o(i.Analog_Task1ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Analog_Task1ms &rArr; ADC_Converse
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Stop
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Converse
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rte_1ms_Task
</UL>

<P><STRONG><a name="[10a]"></a>Analog_getValue</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, analog.o(i.Analog_getValue))
<BR><BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyScan_InputProcess
</UL>

<P><STRONG><a name="[89]"></a>BootInit</STRONG> (Thumb, 130 bytes, Stack size 528 bytes, bootcfg.o(i.BootInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = BootInit &rArr; LINTP_TxMsg
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCurrentSession
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RestartS3Server
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LINTP_TxMsg
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearRxMsgReadlly
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReflashWorkMode
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EcuM_Init
</UL>

<P><STRONG><a name="[8f]"></a>BootMonitor</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, bootcfg.o(i.BootMonitor))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BootMonitor
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetMcu
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rte_1ms_Task
</UL>

<P><STRONG><a name="[d4]"></a>CGC_Osc_Setting</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, cgc.o(i.CGC_Osc_Setting))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CGC_Osc_Setting
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mcu_SystemClock_Init
</UL>

<P><STRONG><a name="[83]"></a>CGC_PER0PeriphClockCmd</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, cgc.o(i.CGC_PER0PeriphClockCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CGC_PER0PeriphClockCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIN_SetConfig
</UL>

<P><STRONG><a name="[91]"></a>CGC_PER1PeriphClockCmd</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, cgc.o(i.CGC_PER1PeriphClockCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CGC_PER1PeriphClockCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMA_Init
</UL>

<P><STRONG><a name="[92]"></a>CLK_GetCoreFreq</STRONG> (Thumb, 122 bytes, Stack size 4 bytes, system_bat32a237.o(i.CLK_GetCoreFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CLK_GetCoreFreq &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[e7]"></a>Cal_CrcCal</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, cal.o(i.Cal_CrcCal))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Cal_CrcCal
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecM_ComputeCRC
</UL>

<P><STRONG><a name="[e8]"></a>Cal_CrcFinalize</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cal.o(i.Cal_CrcFinalize))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecM_ComputeCRC
</UL>

<P><STRONG><a name="[e6]"></a>Cal_CrcInit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cal.o(i.Cal_CrcInit))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecM_ComputeCRC
</UL>

<P><STRONG><a name="[8e]"></a>ClearRxMsgReadlly</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, uds_lin_tp.o(i.ClearRxMsgReadlly))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BootInit
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDS_MainFun
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TransferData
</UL>

<P><STRONG><a name="[96]"></a>EcuM_AL_DriverInit</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, ecum_callout_stubs.o(i.EcuM_AL_DriverInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = EcuM_AL_DriverInit &rArr; MCU_Config &rArr; Mcu_SystemClock_Init &rArr; CGC_Osc_Setting
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EcuM_Init
</UL>

<P><STRONG><a name="[98]"></a>EcuM_AL_SwitchOff</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, ecum_callout_stubs.o(i.EcuM_AL_SwitchOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EcuM_AL_SwitchOff
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rte_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EcuM_MainFunction_10ms
</UL>

<P><STRONG><a name="[9a]"></a>EcuM_Init</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, ecum.o(i.EcuM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = EcuM_Init &rArr; BootInit &rArr; LINTP_TxMsg
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_HAL_Init
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rte_TaskPolling
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rte_Start
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rte_Init
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_Interrupt_Config
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EcuM_AL_DriverInit
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BootInit
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIN_SleepIO_Init
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIN_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a4]"></a>EcuM_MainFunction_10ms</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, ecum.o(i.EcuM_MainFunction_10ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EcuM_MainFunction_10ms &rArr; EcuM_AL_SwitchOff
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EcuM_AL_SwitchOff
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rte_10ms_Task_A
</UL>

<P><STRONG><a name="[a5]"></a>EraseAllApp</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, bootcfg.o(i.EraseAllApp))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EraseAllApp &rArr; EraseOneSector
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EraseOneSector
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Restart
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uds_FlashControlMain
</UL>

<P><STRONG><a name="[a7]"></a>EraseOneSector</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, bootcfg.o(i.EraseOneSector))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EraseOneSector
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EraseSector
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReflashWorkMode
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EraseAllApp
</UL>

<P><STRONG><a name="[a9]"></a>FlashCheckSum</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, bootcfg.o(i.FlashCheckSum))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = FlashCheckSum &rArr; SecM_ComputeCRC &rArr; Cal_CrcCal
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecM_ComputeCRC
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uds_FlashControlMain
</UL>

<P><STRONG><a name="[ad]"></a>FlashReadOneByte</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bootcfg.o(i.FlashReadOneByte))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWriteOneByte
</UL>

<P><STRONG><a name="[ab]"></a>FlashWriteMultiByte</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, bootcfg.o(i.FlashWriteMultiByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = FlashWriteMultiByte &rArr; FlashWriteOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWriteOneByte
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TransferData
</UL>

<P><STRONG><a name="[ac]"></a>FlashWriteOneByte</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, bootcfg.o(i.FlashWriteOneByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = FlashWriteOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashReadOneByte
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWriteMultiByte
</UL>

<P><STRONG><a name="[ae]"></a>GPIO_Init</STRONG> (Thumb, 562 bytes, Stack size 24 bytes, gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mcu_PortOutput_Init
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mcu_PortInput_Init
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0_Init
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIN_SleepIO_Init
</UL>

<P><STRONG><a name="[af]"></a>GPIO_PinAFConfig</STRONG> (Thumb, 186 bytes, Stack size 36 bytes, gpio.o(i.GPIO_PinAFConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = GPIO_PinAFConfig &rArr; GPIO_SetPIOR
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetPIOR
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinCheck
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0_Init
</UL>

<P><STRONG><a name="[b0]"></a>GPIO_PinCheck</STRONG> (Thumb, 102 bytes, Stack size 0 bytes, gpio.o(i.GPIO_PinCheck))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
</UL>

<P><STRONG><a name="[b2]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 154 bytes, Stack size 8 bytes, gpio.o(i.GPIO_ReadInputDataBit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_ReadInputDataBit
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyScan_InputProcess
</UL>

<P><STRONG><a name="[9e]"></a>GPIO_ResetBits</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, gpio.o(i.GPIO_ResetBits))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_ResetBits
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EcuM_Init
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bag9out
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bag8out
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bag7out
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bag6out
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bag5out
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bag4out
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bag3out
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bag2out
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bag1out
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bag10out
</UL>

<P><STRONG><a name="[a0]"></a>GPIO_SetBits</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, gpio.o(i.GPIO_SetBits))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_SetBits
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EcuM_Init
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bag9out
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bag8out
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bag7out
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bag6out
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bag5out
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bag4out
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bag3out
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bag2out
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bag1out
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bag10out
</UL>

<P><STRONG><a name="[b1]"></a>GPIO_SetPIOR</STRONG> (Thumb, 374 bytes, Stack size 16 bytes, gpio.o(i.GPIO_SetPIOR))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO_SetPIOR
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
</UL>

<P><STRONG><a name="[b3]"></a>GPIO_ToggleBits</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, gpio.o(i.GPIO_ToggleBits))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_ToggleBits
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rte_10ms_Task_A
</UL>

<P><STRONG><a name="[100]"></a>GetUDSServiceInfo</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, uds_app.o(i.GetUDSServiceInfo))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDS_MainFun
</UL>

<P><STRONG><a name="[15]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, debug.o(i.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32a237.o(RESET)
</UL>
<P><STRONG><a name="[b4]"></a>INTP_Init</STRONG> (Thumb, 242 bytes, Stack size 32 bytes, intp.o(i.INTP_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = INTP_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Intp_Init
</UL>

<P><STRONG><a name="[b7]"></a>INTP_Start</STRONG> (Thumb, 238 bytes, Stack size 0 bytes, intp.o(i.INTP_Start))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Intp_Init
</UL>

<P><STRONG><a name="[19]"></a>IRQ00_Handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, isr.o(i.IRQ00_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ00_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32a237.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>IRQ01_Handler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, isr.o(i.IRQ01_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ01_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32a237.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>IRQ02_Handler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, isr.o(i.IRQ02_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ02_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32a237.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>IRQ03_Handler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, isr.o(i.IRQ03_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ03_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32a237.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>IRQ04_Handler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, isr.o(i.IRQ04_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ04_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32a237.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>IRQ05_Handler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, isr.o(i.IRQ05_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ05_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32a237.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>IRQ06_Handler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, isr.o(i.IRQ06_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ06_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32a237.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>IRQ07_Handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, isr.o(i.IRQ07_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ07_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32a237.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>IRQ08_Handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, isr.o(i.IRQ08_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ08_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32a237.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>IRQ09_Handler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, isr.o(i.IRQ09_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ09_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32a237.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>IRQ10_Handler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, isr.o(i.IRQ10_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ10_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32a237.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>IRQ11_Handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, isr.o(i.IRQ11_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ11_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32a237.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>IRQ12_Handler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, isr.o(i.IRQ12_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ12_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32a237.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>IRQ13_Handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, isr.o(i.IRQ13_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ13_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32a237.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>IRQ14_Handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, isr.o(i.IRQ14_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ14_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32a237.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>IRQ15_Handler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, isr.o(i.IRQ15_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ15_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32a237.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>IRQ16_Handler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, isr.o(i.IRQ16_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ16_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32a237.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>IRQ17_Handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, isr.o(i.IRQ17_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ17_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32a237.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>IRQ18_Handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, isr.o(i.IRQ18_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ18_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32a237.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>IRQ19_Handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, isr.o(i.IRQ19_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ19_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32a237.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>IRQ20_Handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, isr.o(i.IRQ20_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ20_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32a237.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>IRQ21_Handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, isr.o(i.IRQ21_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ21_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32a237.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>IRQ22_Handler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, isr.o(i.IRQ22_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ22_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32a237.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>IRQ23_Handler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, isr.o(i.IRQ23_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ23_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32a237.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>IRQ24_Handler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, isr.o(i.IRQ24_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ24_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32a237.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>IRQ25_Handler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, isr.o(i.IRQ25_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ25_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32a237.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>IRQ26_Handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, isr.o(i.IRQ26_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ26_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32a237.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>IRQ27_Handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, isr.o(i.IRQ27_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ27_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32a237.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>IRQ28_Handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, isr.o(i.IRQ28_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ28_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32a237.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>IRQ29_Handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, isr.o(i.IRQ29_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ29_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32a237.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>IRQ30_Handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, isr.o(i.IRQ30_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ30_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32a237.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>IRQ31_Handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, isr.o(i.IRQ31_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ31_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32a237.o(RESET)
</UL>
<P><STRONG><a name="[b6]"></a>ISR_Register</STRONG> (Thumb, 146 bytes, Stack size 20 bytes, isr.o(i.ISR_Register))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ISR_Register
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_HAL_Init
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Intp_Init
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIN_SetConfig
</UL>

<P><STRONG><a name="[5]"></a>IntDefaultHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, isr.o(i.IntDefaultHandler))
<BR>[Address Reference Count : 1]<UL><LI> isr.o(.data)
</UL>
<P><STRONG><a name="[b5]"></a>Intp_Init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, intp_drv.o(i.Intp_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Intp_Init &rArr; INTP_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTP_Start
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTP_Init
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISR_Register
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIN_SetConfig
</UL>

<P><STRONG><a name="[101]"></a>IsCurRxIdCanRequest</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, uds_app.o(i.IsCurRxIdCanRequest))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDS_MainFun
</UL>

<P><STRONG><a name="[103]"></a>IsCurSecurityLevelRequet</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, uds_app.o(i.IsCurSecurityLevelRequet))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDS_MainFun
</UL>

<P><STRONG><a name="[102]"></a>IsCurSeesionCanRequest</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, uds_app.o(i.IsCurSeesionCanRequest))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDS_MainFun
</UL>

<P><STRONG><a name="[ff]"></a>IsRxMsgReally</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uds_lin_tp.o(i.IsRxMsgReally))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDS_MainFun
</UL>

<P><STRONG><a name="[fd]"></a>IsS3ServerTimeout</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, uds_app.o(i.IsS3ServerTimeout))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDS_MainFun
</UL>

<P><STRONG><a name="[f1]"></a>LINTP_DriverWriteDataInLINTP</STRONG> (Thumb, 358 bytes, Stack size 28 bytes, uds_lin_tp.o(i.LINTP_DriverWriteDataInLINTP))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = LINTP_DriverWriteDataInLINTP
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_DriverWriteDataInTP
</UL>

<P><STRONG><a name="[55]"></a>LINTP_RxMsg</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, uds_lin_tp.o(i.LINTP_RxMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LINTP_RxMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDS_MainFun
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uds_lin_tp.o(.constdata)
</UL>
<P><STRONG><a name="[54]"></a>LINTP_TxMsg</STRONG> (Thumb, 144 bytes, Stack size 40 bytes, uds_lin_tp.o(i.LINTP_TxMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LINTP_TxMsg
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BootInit
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDS_MainFun
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetNegativeErroCode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uds_lin_tp.o(.constdata)
</UL>
<P><STRONG><a name="[10c]"></a>LIN_Receive</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, lin_protocol.o(i.LIN_Receive))
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tim40_channel3_interrupt
</UL>

<P><STRONG><a name="[bf]"></a>LIN_ReceiveBreak</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, lin_protocol.o(i.LIN_ReceiveBreak))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LIN_ReceiveBreak &rArr; TIM_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Stop
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIN_SetConfig
</UL>

<P><STRONG><a name="[c9]"></a>LIN_Send</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lin_protocol.o(i.LIN_Send))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinSlaverRespond
</UL>

<P><STRONG><a name="[9f]"></a>LIN_SetConfig</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, lin_protocol.o(i.LIN_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LIN_SetConfig &rArr; Uart0_Init &rArr; UART_Init &rArr; SCIPeriphal_ClockUpdate &rArr; __aeabi_cdrcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Start
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCounter
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CGC_PER0PeriphClockCmd
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0_Init
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Intp_Init
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISR_Register
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIN_ReceiveBreak
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EcuM_Init
</UL>

<P><STRONG><a name="[9d]"></a>LIN_SleepIO_Init</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, lin_protocol.o(i.LIN_SleepIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LIN_SleepIO_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EcuM_Init
</UL>

<P><STRONG><a name="[3f]"></a>LinMainFun</STRONG> (Thumb, 432 bytes, Stack size 8 bytes, lin_protocol.o(i.LinMainFun))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = LinMainFun &rArr; TP_DriverWriteDataInTP &rArr; LINTP_DriverWriteDataInLINTP
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_DriverWriteDataInTP
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OverTimeTask
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lin_Checksum
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinSlaverRespond
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lin_protocol.o(i.LIN_SetConfig)
</UL>
<P><STRONG><a name="[c8]"></a>LinSlaverRespond</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, lin_protocol.o(i.LinSlaverRespond))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = LinSlaverRespond &rArr; Lin_Checksum &rArr; Lin_CheckPID
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lin_Checksum
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIN_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinMainFun
</UL>

<P><STRONG><a name="[ca]"></a>Lin_CheckPID</STRONG> (Thumb, 50 bytes, Stack size 12 bytes, lin_protocol.o(i.Lin_CheckPID))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Lin_CheckPID
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_lin_receive
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lin_Checksum
</UL>

<P><STRONG><a name="[c6]"></a>Lin_Checksum</STRONG> (Thumb, 120 bytes, Stack size 20 bytes, lin_protocol.o(i.Lin_Checksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Lin_Checksum &rArr; Lin_CheckPID
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lin_CheckPID
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinSlaverRespond
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinMainFun
</UL>

<P><STRONG><a name="[97]"></a>MCU_Config</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, mcu.o(i.MCU_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = MCU_Config &rArr; Mcu_SystemClock_Init &rArr; CGC_Osc_Setting
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mcu_SystemClock_Init
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mcu_PORTConfig_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EcuM_AL_DriverInit
</UL>

<P><STRONG><a name="[9c]"></a>MCU_Interrupt_Config</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, mcu.o(i.MCU_Interrupt_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MCU_Interrupt_Config &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EcuM_Init
</UL>

<P><STRONG><a name="[d0]"></a>Massage_task10ms</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, massage.o(i.Massage_task10ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Massage_task10ms &rArr; Massage_modeManage &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Massage_modeManage
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rte_10ms_Task_C
</UL>

<P><STRONG><a name="[c5]"></a>OverTimeTask</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lin_protocol.o(i.OverTimeTask))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinMainFun
</UL>

<P><STRONG><a name="[8d]"></a>ReflashWorkMode</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, bootcfg.o(i.ReflashWorkMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ReflashWorkMode &rArr; EraseOneSector
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EraseOneSector
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BootInit
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uds_FlashControlMain
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetECU
</UL>

<P><STRONG><a name="[90]"></a>ResetMcu</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, bootcfg.o(i.ResetMcu))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetMonitor
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BootMonitor
</UL>

<P><STRONG><a name="[d8]"></a>ResetMonitor</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, bootcfg.o(i.ResetMonitor))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ResetMonitor &rArr; delayMS &rArr; m0_delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayMS
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetMcu
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rte_1ms_Task
</UL>

<P><STRONG><a name="[8c]"></a>RestartS3Server</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, uds_app.o(i.RestartS3Server))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RestartS3Server &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BootInit
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDS_MainFun
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoutineControl
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DigSession
</UL>

<P><STRONG><a name="[42]"></a>Rte_10ms_Task_A</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rte.o(i.Rte_10ms_Task_A))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Rte_10ms_Task_A &rArr; EcuM_MainFunction_10ms &rArr; EcuM_AL_SwitchOff
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ToggleBits
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EcuM_MainFunction_10ms
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rte_cfg.o(.constdata)
</UL>
<P><STRONG><a name="[44]"></a>Rte_10ms_Task_B</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, rte.o(i.Rte_10ms_Task_B))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Rte_10ms_Task_B &rArr; keyScan_Task10ms &rArr; keyScan_InputProcess &rArr; GPIO_ReadInputDataBit
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyScan_Task10ms
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rte_cfg.o(.constdata)
</UL>
<P><STRONG><a name="[45]"></a>Rte_10ms_Task_C</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, rte.o(i.Rte_10ms_Task_C))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Rte_10ms_Task_C &rArr; Massage_task10ms &rArr; Massage_modeManage &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Massage_task10ms
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rte_cfg.o(.constdata)
</UL>
<P><STRONG><a name="[46]"></a>Rte_10ms_Task_D</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rte.o(i.Rte_10ms_Task_D))
<BR>[Address Reference Count : 1]<UL><LI> rte_cfg.o(.constdata)
</UL>
<P><STRONG><a name="[47]"></a>Rte_10ms_Task_E</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rte.o(i.Rte_10ms_Task_E))
<BR>[Address Reference Count : 1]<UL><LI> rte_cfg.o(.constdata)
</UL>
<P><STRONG><a name="[41]"></a>Rte_1ms_Task</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, rte.o(i.Rte_1ms_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = Rte_1ms_Task &rArr; UDS_MainFun &rArr; SetNegativeErroCode &rArr; LINTP_TxMsg
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetMonitor
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BootMonitor
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Task1ms
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Restart
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uds_FlashControlMain
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDS_MainFun
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rte_cfg.o(.constdata)
</UL>
<P><STRONG><a name="[43]"></a>Rte_2ms_Task</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rte.o(i.Rte_2ms_Task))
<BR>[Address Reference Count : 1]<UL><LI> rte_cfg.o(.constdata)
</UL>
<P><STRONG><a name="[ec]"></a>Rte_IncrementCounter</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, rte.o(i.Rte_IncrementCounter))
<BR><BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[9b]"></a>Rte_Init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, rte.o(i.Rte_Init))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EcuM_Init
</UL>

<P><STRONG><a name="[a2]"></a>Rte_Start</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rte.o(i.Rte_Start))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EcuM_Init
</UL>

<P><STRONG><a name="[99]"></a>Rte_Stop</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rte.o(i.Rte_Stop))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EcuM_AL_SwitchOff
</UL>

<P><STRONG><a name="[a3]"></a>Rte_TaskPolling</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, rte.o(i.Rte_TaskPolling))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EcuM_Init
</UL>

<P><STRONG><a name="[de]"></a>SCIChannel_Alloca</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, sci_common.o(i.SCIChannel_Alloca))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SCIChannel_Alloca &rArr; Alloc_ChannelFlag
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alloc_ChannelFlag
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[df]"></a>SCIPeriphal_ClockUpdate</STRONG> (Thumb, 240 bytes, Stack size 80 bytes, sci_common.o(i.SCIPeriphal_ClockUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = SCIPeriphal_ClockUpdate &rArr; __aeabi_cdrcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[e4]"></a>SCI_GetErrStaus</STRONG> (Thumb, 274 bytes, Stack size 24 bytes, sci_common.o(i.SCI_GetErrStaus))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SCI_GetErrStaus
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCI_GetFlagStatus
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetErrStaus
</UL>

<P><STRONG><a name="[e5]"></a>SCI_GetFlagStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, sci_common.o(i.SCI_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCI_GetErrStaus
</UL>

<P><STRONG><a name="[aa]"></a>SecM_ComputeCRC</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, secm.o(i.SecM_ComputeCRC))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SecM_ComputeCRC &rArr; Cal_CrcCal
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_CrcInit
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_CrcFinalize
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_CrcCal
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashCheckSum
</UL>

<P><STRONG><a name="[8b]"></a>SetCurrentSession</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uds_app.o(i.SetCurrentSession))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BootInit
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDS_MainFun
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DigSession
</UL>

<P><STRONG><a name="[94]"></a>SetNegativeErroCode</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, uds_app.o(i.SetNegativeErroCode))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SetNegativeErroCode &rArr; LINTP_TxMsg
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LINTP_TxMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDS_MainFun
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TransferData
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TesterPresent
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecurityAccess
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoutineControl
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetECU
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RequestDownload
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDataByIdentifier
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DigSession
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ControlDTCSetting
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommunicationControl
</UL>

<P><STRONG><a name="[95]"></a>SetSecurityLevel</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uds_app.o(i.SetSecurityLevel))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDS_MainFun
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecurityAccess
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DigSession
</UL>

<P><STRONG><a name="[105]"></a>SubUdsS3ServerTime</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, uds_app.o(i.SubUdsS3ServerTime))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDS_SystemTickCtl
</UL>

<P><STRONG><a name="[18]"></a>SysTick_Handler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, isr.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysTick_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rte_IncrementCounter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32a237.o(RESET)
</UL>
<P><STRONG><a name="[d3]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, system_bat32a237.o(i.SystemCoreClockUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SystemCoreClockUpdate &rArr; CLK_GetCoreFreq &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetCoreFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mcu_SystemClock_Init
</UL>

<P><STRONG><a name="[39]"></a>SystemInit</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, system_bat32a237.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SystemInit &rArr; CLK_GetCoreFreq &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetCoreFreq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32a237.o(.text)
</UL>
<P><STRONG><a name="[40]"></a>TIMER_HAL_1msPeriod</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, timer_hal.o(i.TIMER_HAL_1msPeriod))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIMER_HAL_1msPeriod &rArr; UDS_SystemTickCtl
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDS_SystemTickCtl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timer_hal.o(i.TIMER_HAL_Init)
</UL>
<P><STRONG><a name="[f9]"></a>TIMER_HAL_GetTimerTickCnt</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, timer_hal.o(i.TIMER_HAL_GetTimerTickCnt))
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDS_ALG_HAL_GetRandom
</UL>

<P><STRONG><a name="[a1]"></a>TIMER_HAL_Init</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, timer_hal.o(i.TIMER_HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TIMER_HAL_Init &rArr; TMA_Init &rArr; CGC_PER1PeriphClockCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISR_Register
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMA_Start
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EcuM_Init
</UL>

<P><STRONG><a name="[c3]"></a>TIM_SetCounter</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, tim.o(i.TIM_SetCounter))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TIM_SetCounter
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim_RegSetting
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIN_SetConfig
</UL>

<P><STRONG><a name="[c1]"></a>TIM_Start</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, tim.o(i.TIM_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim_RegSetting
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIN_SetConfig
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIN_ReceiveBreak
</UL>

<P><STRONG><a name="[c0]"></a>TIM_Stop</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, tim.o(i.TIM_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim_RegSetting
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIN_ReceiveBreak
</UL>

<P><STRONG><a name="[ee]"></a>TMA_Init</STRONG> (Thumb, 482 bytes, Stack size 8 bytes, tima.o(i.TMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TMA_Init &rArr; CGC_PER1PeriphClockCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CGC_PER1PeriphClockCmd
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_HAL_Init
</UL>

<P><STRONG><a name="[ef]"></a>TMA_Start</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tima.o(i.TMA_Start))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_HAL_Init
</UL>

<P><STRONG><a name="[c7]"></a>TP_DriverWriteDataInTP</STRONG> (Thumb, 26 bytes, Stack size 20 bytes, uds_lin_tp.o(i.TP_DriverWriteDataInTP))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = TP_DriverWriteDataInTP &rArr; LINTP_DriverWriteDataInLINTP
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LINTP_DriverWriteDataInLINTP
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinMainFun
</UL>

<P><STRONG><a name="[f0]"></a>Tim_RegSetting</STRONG> (Thumb, 130 bytes, Stack size 0 bytes, tim.o(i.Tim_RegSetting))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Stop
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Start
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCounter
</UL>

<P><STRONG><a name="[f5]"></a>UART_GetErrStaus</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, uart.o(i.UART_GetErrStaus))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UART_GetErrStaus &rArr; SCI_GetErrStaus
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCI_GetErrStaus
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_lin_receive
</UL>

<P><STRONG><a name="[f6]"></a>UART_Init</STRONG> (Thumb, 254 bytes, Stack size 40 bytes, uart.o(i.UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = UART_Init &rArr; SCIPeriphal_ClockUpdate &rArr; __aeabi_cdrcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCIPeriphal_ClockUpdate
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCIChannel_Alloca
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CGC_PER0PeriphClockCmd
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetSysClock
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_Init
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_Init
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_Init
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0_Init
</UL>

<P><STRONG><a name="[fc]"></a>UDS_ALG_HAL_AddSWTimerTickCnt</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, uds_alg_hal.o(i.UDS_ALG_HAL_AddSWTimerTickCnt))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDS_MainFun
</UL>

<P><STRONG><a name="[be]"></a>UDS_ALG_HAL_GetKey</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, uds_alg_hal.o(i.UDS_ALG_HAL_GetKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UDS_ALG_HAL_GetKey
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsReceivedKeyRight
</UL>

<P><STRONG><a name="[ea]"></a>UDS_ALG_HAL_GetRandom</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, uds_alg_hal.o(i.UDS_ALG_HAL_GetRandom))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UDS_ALG_HAL_GetRandom
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsl_srand
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsl_rand
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_HAL_GetTimerTickCnt
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecurityAccess
</UL>

<P><STRONG><a name="[dc]"></a>UDS_MainFun</STRONG> (Thumb, 312 bytes, Stack size 552 bytes, uds_app.o(i.UDS_MainFun))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = UDS_MainFun &rArr; SetNegativeErroCode &rArr; LINTP_TxMsg
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCurrentSession
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RestartS3Server
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LINTP_TxMsg
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearRxMsgReadlly
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDS_ALG_HAL_AddSWTimerTickCnt
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_InitDowloadInfo
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LINTP_RxMsg
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsRxMsgReally
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSecurityLevel
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetNegativeErroCode
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsS3ServerTimeout
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsCurSeesionCanRequest
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsCurSecurityLevelRequet
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsCurRxIdCanRequest
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUDSServiceInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rte_1ms_Task
</UL>

<P><STRONG><a name="[ed]"></a>UDS_SystemTickCtl</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, uds_app.o(i.UDS_SystemTickCtl))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UDS_SystemTickCtl
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUdsS3ServerTime
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dcm_SecurityTimerCheck
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubUdsS3ServerTime
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_HAL_1msPeriod
</UL>

<P><STRONG><a name="[c2]"></a>Uart0_Init</STRONG> (Thumb, 152 bytes, Stack size 40 bytes, uart_drv.o(i.Uart0_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = Uart0_Init &rArr; UART_Init &rArr; SCIPeriphal_ClockUpdate &rArr; __aeabi_cdrcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sci_error_log
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIN_SetConfig
</UL>

<P><STRONG><a name="[dd]"></a>Uds_FlashControlMain</STRONG> (Thumb, 136 bytes, Stack size 8 bytes, uds_app.o(i.Uds_FlashControlMain))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = Uds_FlashControlMain &rArr; FlashCheckSum &rArr; SecM_ComputeCRC &rArr; Cal_CrcCal
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReflashWorkMode
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashCheckSum
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EraseAllApp
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rte_1ms_Task
</UL>

<P><STRONG><a name="[a6]"></a>WDT_Restart</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, wdt.o(i.WDT_Restart))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EraseAllApp
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rte_1ms_Task
</UL>

<P><STRONG><a name="[93]"></a>__ARM_common_switch8</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lin_protocol.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinMainFun
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Massage_modeManage
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetCoreFreq
</UL>

<P><STRONG><a name="[82]"></a>assert_failed</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gpio.o(i.assert_failed))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ToggleBits
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CGC_PER1PeriphClockCmd
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Stop
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Start
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCounter
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alloc_ChannelFlag
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCI_GetErrStaus
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCIChannel_Alloca
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CGC_PER0PeriphClockCmd
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetErrStaus
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_Init
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_Init
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_Init
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTP_Init
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMA_Init
</UL>

<P><STRONG><a name="[10b]"></a>delay1_us</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, delay.o(i.delay1_us))
<BR><BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m0_delay_ms
</UL>

<P><STRONG><a name="[d9]"></a>delayMS</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, delay_drv.o(i.delayMS))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = delayMS &rArr; m0_delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m0_delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetMonitor
</UL>

<P><STRONG><a name="[d5]"></a>delay_init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, delay.o(i.delay_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = delay_init
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mcu_SystemClock_Init
</UL>

<P><STRONG><a name="[fb]"></a>fsl_rand</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, uds_alg_hal.o(i.fsl_rand))
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDS_ALG_HAL_GetRandom
</UL>

<P><STRONG><a name="[fa]"></a>fsl_srand</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, uds_alg_hal.o(i.fsl_srand))
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDS_ALG_HAL_GetRandom
</UL>

<P><STRONG><a name="[3b]"></a>intp0_interrupt</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, intp_drv.o(i.intp0_interrupt))
<BR>[Address Reference Count : 1]<UL><LI> intp_drv.o(i.Intp_Init)
</UL>
<P><STRONG><a name="[db]"></a>keyScan_Task10ms</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, keyscan.o(i.keyScan_Task10ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = keyScan_Task10ms &rArr; keyScan_InputProcess &rArr; GPIO_ReadInputDataBit
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyScan_InputProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rte_10ms_Task_B
</UL>

<P><STRONG><a name="[10d]"></a>lin_callback_error</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lin_protocol.o(i.lin_callback_error))
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_lin_receive
</UL>

<P><STRONG><a name="[108]"></a>m0_delay_ms</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, delay.o(i.m0_delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = m0_delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay1_us
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayMS
</UL>

<P><STRONG><a name="[5f]"></a>main</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = main &rArr; EcuM_Init &rArr; BootInit &rArr; LINTP_TxMsg
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EcuM_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[107]"></a>sci_error_log</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, sci_common.o(i.sci_error_log_internal))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0_Init
</UL>

<P><STRONG><a name="[149]"></a>sci_error_log_internal</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sci_common.o(i.sci_error_log_internal), UNUSED)

<P><STRONG><a name="[3e]"></a>tim40_channel3_interrupt</STRONG> (Thumb, 180 bytes, Stack size 8 bytes, lin_protocol.o(i.tim40_channel3_interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tim40_channel3_interrupt
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIN_Receive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lin_protocol.o(i.LIN_SetConfig)
</UL>
<P><STRONG><a name="[3d]"></a>uart0_lin_receive</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, lin_protocol.o(i.uart0_lin_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = uart0_lin_receive &rArr; UART_GetErrStaus &rArr; SCI_GetErrStaus
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetErrStaus
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lin_callback_error
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lin_CheckPID
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lin_protocol.o(i.LIN_SetConfig)
</UL>
<P><STRONG><a name="[3c]"></a>uart0_lin_send</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, lin_protocol.o(i.uart0_lin_send))
<BR>[Address Reference Count : 1]<UL><LI> lin_protocol.o(i.LIN_SetConfig)
</UL>
<P><STRONG><a name="[14a]"></a>EraseChip</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, flash.o(ram_fetch_code), UNUSED)

<P><STRONG><a name="[a8]"></a>EraseSector</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, flash.o(ram_fetch_code))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EraseOneSector
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
</UL>

<P><STRONG><a name="[10f]"></a>ProgramPage</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, flash.o(ram_fetch_code), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
</UL>

<P><STRONG><a name="[10e]"></a>flash_write</STRONG> (Thumb, 332 bytes, Stack size 1084 bytes, flash.o(ram_fetch_code), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgramPage
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EraseSector
</UL>

<P><STRONG><a name="[14b]"></a>flashRead</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, flash.o(ram_fetch_code), UNUSED)

<P><STRONG><a name="[e3]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, drlef.o(x$fpl$drleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCIPeriphal_ClockUpdate
</UL>

<P><STRONG><a name="[110]"></a>_drcmple</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, drlef.o(x$fpl$drleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_InfNaN
</UL>

<P><STRONG><a name="[e0]"></a>__aeabi_fmul</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCIPeriphal_ClockUpdate
</UL>

<P><STRONG><a name="[14c]"></a>_fmul</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul), UNUSED)

<P><STRONG><a name="[f8]"></a>__aeabi_cfrcmple</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, frlef.o(x$fpl$frleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_cfrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[111]"></a>_frcmple</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, frlef.o(x$fpl$frleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_InfNaN
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[f2]"></a>UART0_Init</STRONG> (Thumb, 560 bytes, Stack size 32 bytes, uart.o(i.UART0_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UART0_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[f3]"></a>UART1_Init</STRONG> (Thumb, 650 bytes, Stack size 32 bytes, uart.o(i.UART1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UART1_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[f4]"></a>UART2_Init</STRONG> (Thumb, 590 bytes, Stack size 32 bytes, uart.o(i.UART2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UART2_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[f7]"></a>UART_GetSysClock</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, uart.o(i.UART_GetSysClock))
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[86]"></a>Alloc_ChannelFlag</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, sci_common.o(i.Alloc_ChannelFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Alloc_ChannelFlag
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCIChannel_Alloca
</UL>

<P><STRONG><a name="[c4]"></a>__NVIC_SetPriority</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, lin_protocol.o(i.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIN_SetConfig
</UL>

<P><STRONG><a name="[cc]"></a>Mcu_PORTConfig_Init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, mcu.o(i.Mcu_PORTConfig_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Mcu_PORTConfig_Init &rArr; Mcu_PortOutput_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mcu_PortOutput_Init
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mcu_PortInput_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_Config
</UL>

<P><STRONG><a name="[d2]"></a>Mcu_PortInput_Init</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, mcu.o(i.Mcu_PortInput_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Mcu_PortInput_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mcu_PORTConfig_Init
</UL>

<P><STRONG><a name="[d1]"></a>Mcu_PortOutput_Init</STRONG> (Thumb, 186 bytes, Stack size 16 bytes, mcu.o(i.Mcu_PortOutput_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Mcu_PortOutput_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mcu_PORTConfig_Init
</UL>

<P><STRONG><a name="[cb]"></a>Mcu_SystemClock_Init</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, mcu.o(i.Mcu_SystemClock_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Mcu_SystemClock_Init &rArr; CGC_Osc_Setting
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CGC_Osc_Setting
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_init
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_Config
</UL>

<P><STRONG><a name="[cd]"></a>__NVIC_SetPriority</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, mcu.o(i.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mcu_SystemClock_Init
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_Interrupt_Config
</UL>

<P><STRONG><a name="[84]"></a>__NVIC_ClearPendingIRQ</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, adc.o(i.__NVIC_ClearPendingIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Stop
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
</UL>

<P><STRONG><a name="[109]"></a>keyScan_InputProcess</STRONG> (Thumb, 310 bytes, Stack size 24 bytes, keyscan.o(i.keyScan_InputProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = keyScan_InputProcess &rArr; GPIO_ReadInputDataBit
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_getValue
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyScan_Task10ms
</UL>

<P><STRONG><a name="[12]"></a>Massage_ModeX</STRONG> (Thumb, 278 bytes, Stack size 24 bytes, massage.o(i.Massage_ModeX))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Massage_ModeX &rArr; Massage_SolenoidManage
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Massage_SolenoidManage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> massage.o(.data)
</UL>
<P><STRONG><a name="[ce]"></a>Massage_SolenoidManage</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, massage.o(i.Massage_SolenoidManage))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Massage_SolenoidManage
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Massage_wave
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Massage_pulse
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Massage_ModeX
</UL>

<P><STRONG><a name="[cf]"></a>Massage_modeManage</STRONG> (Thumb, 260 bytes, Stack size 16 bytes, massage.o(i.Massage_modeManage))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Massage_modeManage &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Massage_task10ms
</UL>

<P><STRONG><a name="[11]"></a>Massage_pulse</STRONG> (Thumb, 260 bytes, Stack size 24 bytes, massage.o(i.Massage_pulse))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Massage_pulse &rArr; Massage_SolenoidManage
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Massage_SolenoidManage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> massage.o(.data)
</UL>
<P><STRONG><a name="[10]"></a>Massage_wave</STRONG> (Thumb, 296 bytes, Stack size 32 bytes, massage.o(i.Massage_wave))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Massage_wave &rArr; Massage_SolenoidManage
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Massage_SolenoidManage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> massage.o(.data)
</UL>
<P><STRONG><a name="[f]"></a>bag10out</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, massage.o(i.bag10out))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = bag10out &rArr; GPIO_SetBits
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Address Reference Count : 1]<UL><LI> massage.o(.data)
</UL>
<P><STRONG><a name="[6]"></a>bag1out</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, massage.o(i.bag1out))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = bag1out &rArr; GPIO_SetBits
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Address Reference Count : 1]<UL><LI> massage.o(.data)
</UL>
<P><STRONG><a name="[7]"></a>bag2out</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, massage.o(i.bag2out))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = bag2out &rArr; GPIO_SetBits
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Address Reference Count : 1]<UL><LI> massage.o(.data)
</UL>
<P><STRONG><a name="[8]"></a>bag3out</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, massage.o(i.bag3out))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = bag3out &rArr; GPIO_SetBits
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Address Reference Count : 1]<UL><LI> massage.o(.data)
</UL>
<P><STRONG><a name="[9]"></a>bag4out</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, massage.o(i.bag4out))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = bag4out &rArr; GPIO_SetBits
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Address Reference Count : 1]<UL><LI> massage.o(.data)
</UL>
<P><STRONG><a name="[a]"></a>bag5out</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, massage.o(i.bag5out))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = bag5out &rArr; GPIO_SetBits
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Address Reference Count : 1]<UL><LI> massage.o(.data)
</UL>
<P><STRONG><a name="[b]"></a>bag6out</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, massage.o(i.bag6out))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = bag6out &rArr; GPIO_SetBits
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Address Reference Count : 1]<UL><LI> massage.o(.data)
</UL>
<P><STRONG><a name="[c]"></a>bag7out</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, massage.o(i.bag7out))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = bag7out &rArr; GPIO_SetBits
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Address Reference Count : 1]<UL><LI> massage.o(.data)
</UL>
<P><STRONG><a name="[d]"></a>bag8out</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, massage.o(i.bag8out))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = bag8out &rArr; GPIO_SetBits
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Address Reference Count : 1]<UL><LI> massage.o(.data)
</UL>
<P><STRONG><a name="[e]"></a>bag9out</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, massage.o(i.bag9out))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = bag9out &rArr; GPIO_SetBits
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Address Reference Count : 1]<UL><LI> massage.o(.data)
</UL>
<P><STRONG><a name="[88]"></a>AppMemset</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, uds_app.o(i.AppMemset))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = AppMemset &rArr; __aeabi_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecurityAccess
</UL>

<P><STRONG><a name="[49]"></a>CommunicationControl</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, uds_app.o(i.CommunicationControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = CommunicationControl &rArr; SetNegativeErroCode &rArr; LINTP_TxMsg
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetNegativeErroCode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uds_app.o(.constdata)
</UL>
<P><STRONG><a name="[4a]"></a>ControlDTCSetting</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, uds_app.o(i.ControlDTCSetting))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ControlDTCSetting &rArr; SetNegativeErroCode &rArr; LINTP_TxMsg
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetNegativeErroCode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uds_app.o(.constdata)
</UL>
<P><STRONG><a name="[e9]"></a>Dcm_GetSecurityTimerExpired</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, uds_app.o(i.Dcm_GetSecurityTimerExpired))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecurityAccess
</UL>

<P><STRONG><a name="[106]"></a>Dcm_SecurityTimerCheck</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, uds_app.o(i.Dcm_SecurityTimerCheck))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDS_SystemTickCtl
</UL>

<P><STRONG><a name="[eb]"></a>Dcm_StartSecurityTimer</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uds_app.o(i.Dcm_StartSecurityTimer))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecurityAccess
</UL>

<P><STRONG><a name="[48]"></a>DigSession</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, uds_app.o(i.DigSession))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = DigSession &rArr; SetNegativeErroCode &rArr; LINTP_TxMsg
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCurrentSession
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RestartS3Server
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSecurityLevel
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetNegativeErroCode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uds_app.o(.constdata)
</UL>
<P><STRONG><a name="[fe]"></a>Flash_InitDowloadInfo</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, uds_app.o(i.Flash_InitDowloadInfo))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDS_MainFun
</UL>

<P><STRONG><a name="[104]"></a>GetUdsS3ServerTime</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uds_app.o(i.GetUdsS3ServerTime))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDS_SystemTickCtl
</UL>

<P><STRONG><a name="[b9]"></a>IsCheckRoutineControlRight</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, uds_app.o(i.IsCheckRoutineControlRight))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IsCheckRoutineControlRight
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsEraseMemoryRoutineControlStart
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsEraseMemoryRoutineControlResult
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsCheckSumRoutineControlStart
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsCheckSumRoutineControlResult
</UL>

<P><STRONG><a name="[b8]"></a>IsCheckSumRoutineControlResult</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, uds_app.o(i.IsCheckSumRoutineControlResult))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IsCheckSumRoutineControlResult &rArr; IsCheckRoutineControlRight
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsCheckRoutineControlRight
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoutineControl
</UL>

<P><STRONG><a name="[ba]"></a>IsCheckSumRoutineControlStart</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, uds_app.o(i.IsCheckSumRoutineControlStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IsCheckSumRoutineControlStart &rArr; IsCheckRoutineControlRight
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsCheckRoutineControlRight
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoutineControl
</UL>

<P><STRONG><a name="[d6]"></a>IsDownloadDataAddrValid</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, uds_app.o(i.IsDownloadDataAddrValid))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RequestDownload
</UL>

<P><STRONG><a name="[d7]"></a>IsDownloadDataLenValid</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, uds_app.o(i.IsDownloadDataLenValid))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RequestDownload
</UL>

<P><STRONG><a name="[bb]"></a>IsEraseMemoryRoutineControlResult</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, uds_app.o(i.IsEraseMemoryRoutineControlResult))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IsEraseMemoryRoutineControlResult &rArr; IsCheckRoutineControlRight
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsCheckRoutineControlRight
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoutineControl
</UL>

<P><STRONG><a name="[bc]"></a>IsEraseMemoryRoutineControlStart</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, uds_app.o(i.IsEraseMemoryRoutineControlStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IsEraseMemoryRoutineControlStart &rArr; IsCheckRoutineControlRight
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsCheckRoutineControlRight
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoutineControl
</UL>

<P><STRONG><a name="[bd]"></a>IsReceivedKeyRight</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, uds_app.o(i.IsReceivedKeyRight))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = IsReceivedKeyRight &rArr; UDS_ALG_HAL_GetKey
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDS_ALG_HAL_GetKey
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecurityAccess
</UL>

<P><STRONG><a name="[4c]"></a>ReadDataByIdentifier</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, uds_app.o(i.ReadDataByIdentifier))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ReadDataByIdentifier &rArr; SetNegativeErroCode &rArr; LINTP_TxMsg
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetNegativeErroCode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uds_app.o(.constdata)
</UL>
<P><STRONG><a name="[4e]"></a>RequestDownload</STRONG> (Thumb, 210 bytes, Stack size 24 bytes, uds_app.o(i.RequestDownload))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = RequestDownload &rArr; SetNegativeErroCode &rArr; LINTP_TxMsg
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsDownloadDataLenValid
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsDownloadDataAddrValid
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetNegativeErroCode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uds_app.o(.constdata)
</UL>
<P><STRONG><a name="[50]"></a>RequestTransferExit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, uds_app.o(i.RequestTransferExit))
<BR>[Address Reference Count : 1]<UL><LI> uds_app.o(.constdata)
</UL>
<P><STRONG><a name="[52]"></a>ResetECU</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, uds_app.o(i.ResetECU))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ResetECU &rArr; SetNegativeErroCode &rArr; LINTP_TxMsg
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReflashWorkMode
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetNegativeErroCode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uds_app.o(.constdata)
</UL>
<P><STRONG><a name="[51]"></a>RoutineControl</STRONG> (Thumb, 390 bytes, Stack size 16 bytes, uds_app.o(i.RoutineControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = RoutineControl &rArr; SetNegativeErroCode &rArr; LINTP_TxMsg
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RestartS3Server
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsEraseMemoryRoutineControlStart
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsEraseMemoryRoutineControlResult
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsCheckSumRoutineControlStart
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsCheckSumRoutineControlResult
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetNegativeErroCode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uds_app.o(.constdata)
</UL>
<P><STRONG><a name="[4b]"></a>SecurityAccess</STRONG> (Thumb, 210 bytes, Stack size 24 bytes, uds_app.o(i.SecurityAccess))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SecurityAccess &rArr; SetNegativeErroCode &rArr; LINTP_TxMsg
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDS_ALG_HAL_GetRandom
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsReceivedKeyRight
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dcm_StartSecurityTimer
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dcm_GetSecurityTimerExpired
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppMemset
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSecurityLevel
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetNegativeErroCode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uds_app.o(.constdata)
</UL>
<P><STRONG><a name="[53]"></a>TesterPresent</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, uds_app.o(i.TesterPresent))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = TesterPresent &rArr; SetNegativeErroCode &rArr; LINTP_TxMsg
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetNegativeErroCode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uds_app.o(.constdata)
</UL>
<P><STRONG><a name="[4f]"></a>TransferData</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, uds_app.o(i.TransferData))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = TransferData &rArr; SetNegativeErroCode &rArr; LINTP_TxMsg
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearRxMsgReadlly
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWriteMultiByte
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetNegativeErroCode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uds_app.o(.constdata)
</UL>
<P><STRONG><a name="[4d]"></a>WriteDataByIdentifier</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, uds_app.o(i.WriteDataByIdentifier))
<BR>[Address Reference Count : 1]<UL><LI> uds_app.o(.constdata)
</UL><P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[7d]"></a>_call_atexit_fns</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>
<HR></body></html>
